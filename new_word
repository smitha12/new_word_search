public class Wordsearch
{
static Scanner input;
static char[][] wordList;
static char[][] board;
static char[][] output;

static int foundRow;
static int foundColumn;
static int currentWord;

public static void main(String[] args) throws FileNotFoundException
{
    File wordInput = new File("words.txt");
    File boardInput = new File("board.txt");
    if(!wordInput.exists() || !boardInput.exists())
    {
        System.out.println("Files do not exist.");
        System.exit(1);
    }

    wordList = new char[7][];   
    board = new char[15][15]; 
    output= new char[15][15]; 



    input = new Scanner(wordInput);
    for(int i = 0; i < wordList.length; i++)
    {
        wordList[i] = input.nextLine().toUpperCase().toCharArray();
    }

    input = new Scanner(boardInput);
    for(int i = 0; i < board[0].length; i++)
    {
        board[i] = input.nextLine().toUpperCase().toCharArray();
    }

    for(int i = 0; i < wordList.length; i++)
    {
        currentWord = i;
        if(findFirstLetter())
        {
            checkEachDirection();
        }
    }

    print(output);
}

static boolean findFirstLetter()
{
    for(int r = 0; r < board.length; r++)
    {
        for(int c = 0; c < board.length; c++)
        {
            if(wordList[currentWord][0] == board[r][c])
            {
                foundRow = r;
                foundColumn = c;
                return true;
            }
        }
    }
    return false;
}

static void checkEachDirection()
{
    checkvertical();
    checkBackwards();
    checkhorizontal();
   }

static void checkvertical()
{
    for(int i = 1; i < wordList[currentWord].length; i++)
    {
        if(foundColumn + i > board.length - 1) return;
        if(wordList[currentWord][i] != board[foundRow][foundColumn + i]) return;
    }
    
    for(int i = 0; i < wordList[currentWord].length; i++)
    {
        output[foundRow][foundColumn + i] = wordList[currentWord][i];
    }
    return;
}

static void checkBackwards()
{
    for(int i = 1; i < wordList[currentWord].length; i++)
    {
        if(foundColumn - i < 0) return;
        if(wordList[currentWord][i] != board[foundRow][foundColumn - i]) return;
    }
   
    for(int i = 0; i < wordList[currentWord].length; i++)
    {
        output[foundRow][foundColumn - i] = wordList[currentWord][i];
    }
    return;
}

static void checkhorizontal()
{
    for(int i = 1; i < wordList[currentWord].length; i++)
    {
        if(foundColumn + i > board.length - 1) return;
        if(foundRow + i > board.length - 1) return;
        if(wordList[currentWord][i] != board[foundRow + i][foundColumn + i]) return;
    }
    
    for(int i = 0; i < wordList[currentWord].length; i++)
    {
        output[foundRow + i][foundColumn + i] = wordList[currentWord][i];
    }
    return;
}

static void print(char[][] board)
{
    for(int i = 0; i < board.length; i++)
    {
        for(int j = 0; j < board.length; j++)
        {
            System.out.print(board[i][j]);
        }
        System.out.println();
    }
    System.out.println();
}    
}
